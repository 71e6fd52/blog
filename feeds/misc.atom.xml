<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>yahvk's blog - misc</title><link href="https://blog.yahvk.ml/" rel="alternate"></link><link href="https://blog.yahvk.ml/feeds/misc.atom.xml" rel="self"></link><id>https://blog.yahvk.ml/</id><updated>2020-04-17T09:32:01+08:00</updated><entry><title>破解课后网</title><link href="https://blog.yahvk.ml/po-jie-ke-hou-wang.html" rel="alternate"></link><published>2020-04-17T09:32:01+08:00</published><updated>2020-04-17T09:32:01+08:00</updated><author><name>yahvk</name></author><id>tag:blog.yahvk.ml,2020-04-17:/po-jie-ke-hou-wang.html</id><summary type="html"></summary><content type="html">&lt;p&gt;疫情期间在家上网课，我们学校用的是&lt;a href="https://www.kehou.com/"&gt;课后网&lt;/a&gt;。
为了能在网课上摸鱼，我就破解了课后网。&lt;/p&gt;
&lt;h2&gt;防止摸鱼&lt;/h2&gt;
&lt;p&gt;在课后网中每节课都有这么一个表格&lt;/p&gt;
&lt;p&gt;&lt;img alt="家长督学界面" src="https://blog.yahvk.ml/images/kehou-1.webp"&gt;&lt;/p&gt;
&lt;p&gt;我的目的就是让认真度为 100%&lt;/p&gt;
&lt;h3&gt;签到&lt;/h3&gt;
&lt;p&gt;在上课过程中，软件会随机跳出签到按钮，有 20 秒的签到时间，超时就算作未签到。
一般一节课会有 2 次签到。&lt;/p&gt;
&lt;h3&gt;认真度&lt;/h3&gt;
&lt;p&gt;&lt;img alt="认真度规则" src="https://blog.yahvk.ml/images/kehou-2.webp"&gt;&lt;/p&gt;
&lt;p&gt;认真度主要受在线时间、「认真时间」和上文所说签到次数的影响。&lt;/p&gt;
&lt;p&gt;「认真时间」app 内没有给出解释，经过实测，切出 app 后是不认真时间，只要让 app 在前台就算是认真。&lt;/p&gt;
&lt;h3&gt;锁屏&lt;/h3&gt;
&lt;p&gt;Windows 端的课后网程序会不断的获取焦点来让自己显示在最上方，影响其它程序的使用。&lt;/p&gt;
&lt;h2&gt;破解一：反编译 apk&lt;/h2&gt;
&lt;p&gt;最初，我认为 apk 的反编译会比 Windows 的简单很多，所以我就对 apk 下手了。&lt;/p&gt;
&lt;p&gt;没有反编译经验，这里的反编译流程是我自己 google 研究出来的，不一定是最好的。&lt;/p&gt;
&lt;p&gt;我当时用的课后网的 apk 传到 mega 上了：&lt;a href="https://mega.nz/file/8HAg1YpS#odqb6VBz6j3jQdeYEK1CstimutTu2tdEGeq_6Vf9LjE"&gt;https://mega.nz/file/8HAg1YpS#odqb6VBz6j3jQdeYEK1CstimutTu2tdEGeq_6Vf9LjE&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;反编译&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apktool d kehou.apk -o kehou-apktool &lt;span class="c1"&gt;# 解包 kehou.apk 到 kehou-apktool&lt;/span&gt;
d2j-dex2jar kehou.apk &lt;span class="c1"&gt;# 提取 kehou.apk 代码为 jar&lt;/span&gt;
jadx kehou-dex2jar.jar &lt;span class="c1"&gt;# 把上一步提取出的 jar 反编译为 java 代码放在 kehou-dex2jar/sources/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;修改代码&lt;/h3&gt;
&lt;h4&gt;签到&lt;/h4&gt;
&lt;p&gt;反编译完了就可以找代码了，在 kehou-apktool/res &lt;code&gt;rg 签到&lt;/code&gt; 找到了一个叫做 &lt;strong&gt;rollcall_confirm&lt;/strong&gt; 的 layout。&lt;/p&gt;
&lt;p&gt;再在 kehou-dex2jar/sources/ &lt;code&gt;rg rollcall&lt;/code&gt; 找到了签到主要在
&lt;code&gt;vizpower/imeeting/RollCallMgr.java&lt;/code&gt; 和 &lt;code&gt;vizpower/imeeting/viewcontroller/RollcallConfirmViewController.java&lt;/code&gt; 两个文件。&lt;/p&gt;
&lt;p&gt;对代码一番研究后找出当签到开始时会调用 &lt;code&gt;RollcallConfirmViewController#onStartRollcallConfirm&lt;/code&gt;，
点击签到按钮后会调用 &lt;code&gt;RollcallConfirmViewController#onBtnClickRollcallConfirm&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以只要在 &lt;code&gt;onStartRollcallConfirm&lt;/code&gt; 中调用 &lt;code&gt;onBtnClickRollcallConfirm&lt;/code&gt;，就可以在开始签到的时候自动签到了。&lt;/p&gt;
&lt;p&gt;然后我还在 &lt;code&gt;onBtnClickRollcallConfirm&lt;/code&gt; 加了个提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;m_pIMainActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getActivity&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;已自动签到&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LENGTH_LONG&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;认真度&lt;/h4&gt;
&lt;p&gt;由上一步可以看出来所有课后网自己的代码都在 vizpower 中，直播课相关的内容在 vizpower/imeeting。&lt;/p&gt;
&lt;p&gt;由「认真时间」的计算方法可以推断逻辑是写在 &lt;code&gt;onPause&lt;/code&gt; 回调内，直接在 vizpower/imeeting &lt;code&gt;rg onPause -A5&lt;/code&gt;，找出这部分代码在 &lt;code&gt;MainActivity.java&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;「认真时间」的计算来自于 Timer 发的心跳包，这个 Timer 在 &lt;code&gt;onPause&lt;/code&gt; 停止，在 &lt;code&gt;onResume&lt;/code&gt; 中恢复。
在 &lt;code&gt;onPause&lt;/code&gt; 中把停止 Timer 的 &lt;code&gt;DesktopShareMgr.getInstance().stopDSTimer();&lt;/code&gt; 这一行注释掉就可以一直「认真」了。&lt;/p&gt;
&lt;h3&gt;编译回 apk&lt;/h3&gt;
&lt;p&gt;需要 Android SDK，编译出 class 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;javac -cp /opt/android-sdk/platforms/android-29/android.jar:.../kehou-dex2jar.jar &amp;lt;edited files&amp;gt; &lt;span class="c1"&gt;# 把 android.jar 和 kehou-dex2jar.jar 的路径换成你自己的&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;把编译出来的 class 文件按原来的目录组织起来，我放在 inject/source 下，然后编译出 dex 文件，再反编译为 smali 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dx --dex --output&lt;span class="o"&gt;=&lt;/span&gt;classes.dex &lt;span class="nb"&gt;source&lt;/span&gt;
d2j-baksmali classes.dex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后用这些 smali 替换掉 apktool 解出来的 smali 文件，然后用 apktool 打包，再签名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apktool b kehou-apktool
&lt;span class="nb"&gt;cd&lt;/span&gt; kehou-apktool/dist/
d2j-apk-sign kehou.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;附注&lt;/h3&gt;
&lt;p&gt;有一些文件内有部分无法反编译的代码，这时用上一节的方法就不行了，
这时要找出对应的函数，只把编译出的对应函数的 smali 代码覆盖过去，而不是所有文件。&lt;/p&gt;
&lt;p&gt;也可以直接编辑 apktool 解出来的 smali 文件，我后来就是这么做的。
但是有时候直接改 smali 代码，大概是改出了些问题，app 执行到那部分代码时会崩溃，这时还是用上一节的方法吧。&lt;/p&gt;
&lt;h2&gt;破解二：辅助功能&lt;/h2&gt;
&lt;p&gt;在一次强制更新后，课后的 app 使用了 360 加固，破解一失效。&lt;/p&gt;
&lt;p&gt;我想到了抢红包的原理，于是我找到了&lt;a href="https://www.jianshu.com/p/e1099a94b979"&gt;《Android 通过辅助功能实现抢微信红包原理简单介绍》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这段暂略……&lt;/p&gt;
&lt;h2&gt;破解三：修改网络流量&lt;/h2&gt;
&lt;p&gt;以为破解二不能破解「认真时间」，所以上课时间这台手机就用不了了，我对此并不满意。
这次我把目标转移到了 PC 端上。&lt;/p&gt;
&lt;p&gt;首先，因为锁屏和我使用 Linux 的需求，我就把课后网装到了虚拟机上。&lt;/p&gt;
&lt;p&gt;反编译 native code 的程序难度太大了，所以很容易想到从网络入手。&lt;/p&gt;
&lt;p&gt;代码：&lt;a href="https://gitlab.com/71e6fd52/kehou_proxy"&gt;https://gitlab.com/71e6fd52/kehou_proxy&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;通讯协议&lt;/h3&gt;
&lt;p&gt;我用的 VirtualBox 自带抓包功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkfifo /tmp/file.pcap
VBoxManage modifyvm vm1 --nictrace1 on --nictracefile1 /tmp/file.pcap
wireshark -k -i /tmp/file.pcap &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是看抓出的包并不容易看出来，只能看出通讯在 9980 端口上，这时破解一中反编译的源代码就派上了用场。&lt;/p&gt;
&lt;p&gt;经过对源代码的分析可以看出包的格式为 &lt;code&gt;0x02 0x02 &amp;lt;后面的长度:i16&amp;gt; 0x01 &amp;lt;命令号:i16&amp;gt; &amp;lt;内容&amp;gt;&lt;/code&gt;，
所有数字为小端。&lt;/p&gt;
&lt;p&gt;所有命令在 vizpower/mtmgr/PDU 下，如 &lt;code&gt;ReplyNaming&lt;/code&gt; 的命令号为 -32206(0x32 0x82)，内容由&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;bTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dwUserID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;byteBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dwUserID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;byteBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可见先是 i32 的 dwUserID，然后是 i8 的 bTime。&lt;/p&gt;
&lt;p&gt;再看一下调用的代码可以看出来 dwUserID 是加入课堂时会由 &lt;code&gt;NotifyJoinMeeting&lt;/code&gt;(-32254) 分配的 ID，
bTime 是签到所花的秒数。&lt;/p&gt;
&lt;h3&gt;修改网络&lt;/h3&gt;
&lt;p&gt;先要让网络经过 nftable，我最初用的是 arp 攻击，后来直接让主机作为虚拟机的网关。&lt;/p&gt;
&lt;p&gt;建一个 tap，此处虚拟机网段为 192.168.2.0/24 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip tuntap add dev tap0 mode tap user &lt;span class="nv"&gt;$USER&lt;/span&gt;
ip addr add &lt;span class="m"&gt;192&lt;/span&gt;.168.2.1/24 scope link dev tap0
ip link &lt;span class="nb"&gt;set&lt;/span&gt; tap0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虚拟机设置为桥接网络，桥接在 tap0 上。&lt;/p&gt;
&lt;p&gt;在把所有发往 9980 的端口劫持了（以主机地址为 192.168.1.200 为例）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;table ip nat {
  chain prerouting {
    type nat hook prerouting priority 0;
    ip saddr 192.168.2.0/24 tcp dport 9980 dnat to 192.168.1.200;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来再在主机上启动一个监听 9980 端口的程序，并把收到的数据（做些修改的）转发到课后网的服务器上。
这个程序在收到 &lt;code&gt;NotifyJoinMeeting&lt;/code&gt;(-32254) 时记录下 UserID，
在收到 &lt;code&gt;RequestNaming&lt;/code&gt;(-32207) 时回复 &lt;code&gt;ReplyNaming&lt;/code&gt;(-32206)。&lt;/p&gt;
&lt;h3&gt;获取 ip&lt;/h3&gt;
&lt;p&gt;上一节所说的中间程序需要连接到课后网的服务器上，但是据我观察，课后网的服务器地址每节课是不一样的。&lt;/p&gt;
&lt;p&gt;所以我就加了一个程序，抓取课后网试图连接的服务器的 ip 地址发送给这个中间程序，这就是我的代码中 &lt;code&gt;pcap_server.rb&lt;/code&gt; 的用处。&lt;/p&gt;</content><category term="misc"></category><category term="kehou"></category></entry></feed>